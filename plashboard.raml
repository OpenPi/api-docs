#%RAML 0.8
title: Plashboard
version: v1
baseUri: http://localhost/
#baseUri: http://localhost/api/{version}
mediaType: application/json

schemas:
  - measures: schema/plashboard-measures.json
    userCommands: schema/plashboard-userCommands.json
    message: schema/plashboard-message.json
    authentication: include schema/plashboard-authentication.raml
    authorized: schema/plashboard-authorized.json
    hardwareConfiguration: schema/plashboard-hardwareConfiguration.json
    userConfiguration: schema/plashboard-userConfiguration.json
    alert: schema/plashboard-alerts.json

traits:
  - secured:
        usage: Apply this to any method that needs to be secured
        description: Some requests require authentication
        headers:
            Authorization:
                description: |
                    The user have to require an authentification session provided by /authorize method.
                required: true
        responses:
            401:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 401,
                                "message": "Authorized require"
                            }
    basic:
        usage: Apply this to any method that needs basic methods
        description: Some requests require basics methods
        responses:
            404:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 404,
                                "message": "Not found"
                            }
            405:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 405,
                                "message": "Methode POST not allowed"
                            }

    timeSearchable:
        usage: Apply this to any method that can be filter by timestamp
        description: Some requests can search data with time filter
        queryParameters:
            time:
                description: Date time to start the search
                example: time="2015-03-04 15:00:00"
                required: false
                type: string

    limitedSearchable:
        usage: Apply this to any method that can be respond a number max of result
        description: Some requests can search data with max result to given back
        queryParameters:
            xlast:
                description: Number of result max to given back
                example: xlast=5
                required: false
                type: integer

/authorize:
    post:
        description: |
            Authentificate user to access data
        queryParameters:
            user:
                description: Name for the user account
                required: true
                type: string
            password:
                description: Password for the user account
                required: true
                type: string
        body:
            application/json:
                schema: authentication
                example: |
                    {
                        "username": Stark,
                        "password": MissPepper01091963
                    }
        responses:
            200:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 200,
                                "message": "You are now logged"
                            }
            401:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": -1,
                                "message": "Username and password invalid"
                            }
            400:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 400,
                                "message": "Bad parameters"
                            }
            405:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 405,
                                "message": "Methode GET not allowed"
                            }
            500:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 500,
                                "message": "Something went wrong in the server"
                            }
    delete:
        is: [ secured ]
        description: |
            Delete the authentification
        responses:
            200:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 200,
                                "message": "You are disconnected"
                            }
            400:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 400,
                                "message": "You are already disconnected"
                            }

/measures:
    get:
        is: [ basic, secured, timeSearchable, limitedSearchable ]
        description: Get all measures for sensors.
        responses:
            200:
                body:
                    application/json:
                        schema: measures
                        example: |
                            [
                                {
                                    "measure_id": 1,
                                    "hardware_id": 5,
                                    "name": "Pool Temperature Sensor",
                                    "value": 21,
                                    "timestamp": "2015-03-03 14:22:00"
                                },
                                {
                                    "measure_id": 2,
                                    "hardware_id": 6,
                                    "name": "Pool Ph Sensor",
                                    "value": 7,
                                    "timestamp": "2015-03-03 14:35:03"
                                },
                                {
                                    "measure_id": 3,
                                    "hardware_id": 9,
                                    "name": "Pool Pressure Sensor",
                                    "value": 4,
                                    "timestamp": "2015-03-03 14:40:52"
                                }	
                            ]
    /{sensorId}:
        description: Get measure for a specific sensor.
        get:
            is: [ basic, secured, timeSearchable, limitedSearchable ]
            description: Get the measure with `hardwareConfigurationId = {sensorId}`.
            responses:
                200:
                    body:
                        application/json:
                            schema: measures
                            example: |
                                {
                                    "measure_id": 1,
                                    "hardware_id": 5,
                                    "name": "Pool Temperature Sensor",
                                    "value": 21,
                                    "timestamp": "2015-03-03 14:22:00"
                                }

/usercommands:
    get:
        is: [ basic, secured, timeSearchable, limitedSearchable ]
        description: Get all user commands.
        responses:
            200:
                body:
                    application/json:
                        schema: userCommands
                        example: |
                            [
                                {
                                    "id": 1,
                                    "type": "UserConfiguration",
                                    "command": "Create",
                                    "targetName": "userConfiguration",
                                    "value": "ph_target:2:su:6",
                                    "timestamp": "2015-03-03 14:22:00",
                                    "done":1
                                },
                                {
                                    "id": 2,
                                    "type": "Actuators",
                                    "command": "Set",
                                    "targetName": "light",
                                    "value": "1",
                                    "timestamp": "2015-03-03 15:00:00",
                                    "done":1
                                },
                                {
                                    "id": 3,
                                    "type": "Actuators",
                                    "command": "Set",
                                    "targetName": "light",
                                    "value": "0",
                                    "timestamp": "2015-03-03 16:45:00",
                                    "done":0
                                }	
                            ]
    post:
        is: [ basic, secured ]
        description: Add a user command executate later by the python process
        queryParameters:
            command:
                description: Command name in enum "Create, Delete, Update, Set"
                required: true
                type: string
            targetName:
                description: Target to apply value
                required: true
                type: string
            value:
                description: Value to apply
                required: true
                type: string
        body:
            application/json:
                example: |
                    {
                        "type": Actuator,
                        "command": Set,
                        "targetName": Light,
                        "value": 0
                    }
        responses:
            201:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 201,
                                "message": "Data created"
                            }
            400:
                body:
                    application/json:
                        schema: message
                        example: |
                            {
                                "code": 400,
                                "message": "Bad parameters"
                            }                            

    /{commandId}:
        description: Get information for a specific command.
        get:
            is: [ basic, secured, timeSearchable, limitedSearchable ]
            description: Get the command with `id = {commandId}`.
            responses:
                200:
                    body:
                        application/json:
                            schema: measures
                            example: |
                                {
                                    "id": 3,
                                    "type": "Actuators",
                                    "command": "Set",
                                    "targetName": "light",
                                    "value": "0",
                                    "timestamp": "2015-03-03 16:45:00",
                                    "done":0
                                }

/hardwareconfigurations:
    get:
        is: [ basic, secured ]
        description: Get all hardwares informations.
        responses:
            200:
                body:
                    application/json:
                        schema: hardwareConfiguration
                        example: |
                            [
                                {
                                    "id": 1 
                                    "name": "Pool Temperature Sensor"
                                    "pin": 1
                                    "type": "Analog"
                                    "IO": "Input"
                                    "init": "Null"
                                    "PullUpDownResistor": "Up"
                                    "unit": "°C"
                                    "tension": "Null"
                                },
                                {
                                    "id": 2
                                    "name": "Pool Light"
                                    "pin": 5
                                    "type": "Numeric"
                                    "IO": "Output"
                                    "init": "True"
                                    "PullUpDownResistor": "None"
                                    "unit": "Null"
                                    "tension": "5"
                                }
                            ]
    /{hardwareId}:
        description: Get measure for a specific sensor.
        get:
            is: [ basic, secured ]
            description: Get the hardware information with `id = {hardwareId}`.
            responses:
                200:
                    body:
                        application/json:
                            schema: hardwareConfiguration
                            example: |
                                {
                                    "id": 1 
                                    "name": "Pool Temperature Sensor"
                                    "pin": 1
                                    "type": "Analog"
                                    "IO": "Input"
                                    "init": "Null"
                                    "PullUpDownResistor": "Up"
                                    "unit": "°C"
                                    "tension": "Null"
                                }

/userconfigurations:
    get:
        is: [ basic, secured ]
        description: Get all configuration informations.
        responses:
            200:
                body:
                    application/json:
                        schema: userConfiguration
                        example: |
                            [
                                {
                                    "id": 1 
                                    "name": "Ph target"
                                    "hardware_id": 4
                                    "hardware_name": "Pool Ph Meter"
                                    "unit": "Without"
                                    "value": "7"
                                },
                                {
                                    "id": 2
                                    "name": "Temperature target"
                                    "hardware_id": 1
                                    "hardware_name": "Pool Temperature Sensor"
                                    "unit": "°C"
                                    "value": "22"
                                }
                            ]
    /{userConfigurationId}:
        description: Get information for a specific configuration.
        get:
            is: [ basic, secured ]
            description: Get the userConfiguration information with `id = {userConfigurationId}`.
            responses:
                200:
                    body:
                        application/json:
                            schema: hardwareConfiguration
                            example: |
                                {
                                    "id": 1 
                                    "name": "Ph target"
                                    "hardware_id": 4
                                    "hardware_name": "Pool Ph Meter"
                                    "unit": "Without"
                                    "value": "7"
                                }
/alerts:
    get:
        is: [ basic, secured, timeSearchable, limitedSearchable ]
        description: Get all alerts actived or not.
        queryParameters:
            viewed:
                description: Filter result with 1 if alert is viewed or 0 if not 
                required: false
                type: integer
        responses:
            200:
                body:
                    application/json:
                        schema: alert
                        example: |
                            [
                                {
                                    "alert_id": 1,
                                    "hardware_id": 1,
                                    "hardware_name": "Pool Temperature Sensor",
                                    "alert_name": "Alert hight temperature  ",
                                    "alert_description": "Water temperature is over the maximum authorize",
                                    "timestamp": "2015-03-19 17:00:00",
                                    "is_viewed": 1
                                },
                                {
                                    "alert_id": 1,
                                    "hardware_id": 1,
                                    "hardware_name": "Pool Temperature Sensor",
                                    "alert_name": "Alert low temperature  ",
                                    "alert_description": "Water temperature is under the minimum authorize",
                                    "timestamp": "2015-03-19 17:00:00",
                                    "is_viewed": 0
                                }  
                            ]
    /{alertId}:
        description: Get information for a specific alert.
        get:
            is: [ basic, secured, timeSearchable, limitedSearchable ]
            description: Get the alert with `id = {alertId}`.
            queryParameters:
                viewed:
                    description: Filter result with 1 if alert is viewed or 0 if not 
                    required: false
                    type: integer
            responses:
                200:
                    body:
                        application/json:
                            schema: alert
                            example: |
                                {
                                    "alert_id": 1,
                                    "hardware_id": 1,
                                    "hardware_name": "Pool Temperature Sensor",
                                    "alert_name": "Alert low temperature  ",
                                    "alert_description": "Water temperature is under the minimum authorize",
                                    "timestamp": "2015-03-19 17:00:00",
                                    "is_viewed": 0
                                }
        put:
            is: [ basic, secured ]
            description: Update the alert show with `id = {alertId}`.
            queryParameters:
                show:
                    description: 1 if user see the alert and 0 to display alert 
                    required: true
                    type: integer
            responses:
                200:
                    body:
                        application/json:
                            schema: message
                            example: |
                                {
                                    "code": 200,
                                    "message": "Update done"
                                }